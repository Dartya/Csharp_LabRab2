using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Csharp_LabRab2
{
    class Program
    {
        static void Main(string[] args)
        {
            try{
                // *** ЗАДАНИЕ 1 ***
                int i = 4;          //инициализация при создании
                double d;           //инициализация 
                d = 4.2;            //после создания
                bool b1, b2;        //инициализация булевых переменных
                b2 = (i < d);       //переменную b2 инициализируем через выражение
                b1 = b2;            //и через другую переменную

                //все перечисленные выше переменные относятся к типам значений
                /*
                Система общих типов CTS определяет способ объявления, использования и управления типами в среде CLR, 
                а также является важной составной частью поддержки межъязыковой интеграции в среде выполнения. 
                Система общих типов выполняет следующие функции.

                Типы в .NET

                Все типы на платформе .NET делятся на типы значений и ссылочные типы.

                Типы значений — это типы данных, объекты которых представлены фактическим значением объекта. Если 
                экземпляр типа значения присваивается переменной, то эта переменная получает новую копию значения.
                
                Ссылочные типы — это типы данных, объекты которых представлены ссылкой (аналогичной указателю) на 
                фактическое значение объекта. Если экземпляр ссылочного типа присваивается переменной, то эта 
                переменная будет ссылаться (указывать) на исходное значение. Копирования при этом не происходит.

                Система общих типов CTS на платформе .NET поддерживает следующие пять категорий типов:
                Классы
                Структуры
                Перечисления
                Интерфейсы
                Делегаты*/

                // *** ЗАДАНИЕ 2 *** 

                double dI = i;      //пример неявного приведения типа из меньшего типа в больший
                int iD1 = (int)d;   //пример явного приведения типа, здесь (int) - оператор явного преобразования
                string str4 = "4";  //строка со значением 4
                int iD3 = Int32.Parse(str4);    //пример преобразования с использованием вспомогательных классов -
                //- парсим строку на предмет нахождения значения, которое можно присвоить переменнной типа int

                //ПРИМЕРЫ ОШИБОК
                //int iD2 = d;      //пример неявного приведения типа, который приведет к ошибке при компиляции

                /*ошибка во время выполнения может возникнуть тогда, когда производится явное преобразование ссылочных типов.
                подробнее из поддержки MSFT: https://docs.microsoft.com/ru-ru/dotnet/csharp/programming-guide/types/casting-and-type-conversions 
                Например, имеется класс Animal. Его экстендят классы Reptile и Mammal.
                Если производить следующие приведения типов, ошибки не возникнет:

                Animal anim = new Animal();
                Reptile rep1 = anim;       - неявное приведение типа Animal к Reptile
                Mammal mam1 = new Mammal();
                Animal anim2 = (anim)mam1; - явное приведение типа Mammal к Animal, при этом anim2 передаются значения 
                только полей, определенных базовым классом Animal

                Ошибка возникнет в момент выполнения программы тогда, когда программа попытается выполнить следующий оператор:
                Reptile rep2 = (Reptile) mam1; , т.к. невозможно выполнить приведение одного дочернего класса к другому, даже
                если у них один и тот же предок
                */                
                
                //объявление строк 
                string str1 = "double dI = i;       //пример неявного приведения типа";
                string str2 = "int iD1 = (int)d;    //пример явного приведения типа";
                string str3 = "int iD2 = d;         //еще один пример неявного приведения типа, который приведет к ошибке при компиляции";
                string[] aStr = {str1, str2, str3}; //и массива из объявленных выше строк

                Console.WriteLine("Значения переменных: \ni = "+i+"\nd = "+d+"\niD3 = "+iD3+"\n");

                for (int iter = 0; iter < aStr.Length; iter++){ 
                    Console.WriteLine(aStr[iter]);
                }

            }
            catch (Exception e){
                Console.WriteLine(e.ToString());
            }
            finally{
                Console.Write("Press <Enter>");
                Console.ReadLine();
            }
            

        }
    }
}